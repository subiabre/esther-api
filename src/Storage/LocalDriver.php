<?php

namespace App\Storage;

use App\Service\RoutesService;
use League\Flysystem\FilesystemAdapter;
use League\Flysystem\Local\LocalFilesystemAdapter;

class LocalDriver implements DriverInterface
{
    public const PUBLIC_DIR = 'public';
    public const STORAGE_DIR = 'storage';

    private string $url;
    private string $path;

    public function __construct(
        private RoutesService $routesService
    ) {
        $this->url = $this->routesService->getAbsoluteUrl('app_index');

        $path = $this->routesService->buildAbsolutePath(self::PUBLIC_DIR, self::STORAGE_DIR);

        if (\file_exists($path) && !\is_dir($path)) {
            throw new \Exception();
        }

        if (!\file_exists($path)) {
            \mkdir($path);
            \file_put_contents(
                \sprintf('%s%s.gitignore', $path, \DIRECTORY_SEPARATOR),
                \implode("\n", [
                    "# Generated by `src/Storage/LocalDriver.php`",
                    "# Do not modify.",
                    "*"
                ])
            );
        }

        $this->path = $path;
    }

    public static function getName(): string
    {
        return 'local';
    }

    public static function getConfiguration(): array
    {
        return [];
    }

    public function getAdapter(): FilesystemAdapter
    {
        return new LocalFilesystemAdapter($this->path);
    }

    public function getPublicUrl(): array
    {
        return [
            \sprintf(
                "%s%s",
                $this->url,
                self::STORAGE_DIR
            )
        ];
    }

    public function isLocalPath(string $path): bool
    {
        $pattern = \sprintf('/^%s/', \preg_quote($this->getPublicUrl()[0], '/'));
        if (!\preg_match($pattern, $path)) {
            return false;
        }

        return $path;
    }

    public function getAbsolutePath(string $path): string
    {
        $pattern = \sprintf('/^%s/', \preg_quote($this->getPublicUrl()[0], '/'));

        return $this->routesService->buildAbsolutePath(
            LocalDriver::PUBLIC_DIR,
            LocalDriver::STORAGE_DIR,
            \preg_replace($pattern, '', $path)
        );
    }
}
