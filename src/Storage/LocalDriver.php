<?php

namespace App\Storage;

use League\Flysystem\FilesystemAdapter;
use League\Flysystem\Local\LocalFilesystemAdapter;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;

class LocalDriver implements DriverInterface
{
    private string $url;
    private string $relPath;
    private string $fullPath;

    public function __construct(
        private string $rootDir,
        private UrlGeneratorInterface $urlGenerator
    ) {
        $this->url = $this->urlGenerator->generate('app_index', [], UrlGeneratorInterface::ABSOLUTE_URL);

        $relPath = "storage";
        $fullPath = \sprintf(
            "%s%spublic%s%s",
            \rtrim($this->rootDir, '\/'),
            \DIRECTORY_SEPARATOR,
            \DIRECTORY_SEPARATOR,
            $relPath
        );

        if (\file_exists($fullPath) && !\is_dir($fullPath)) {
            throw new \Exception();
        }

        if (!\file_exists($fullPath)) {
            \mkdir($fullPath);
            \file_put_contents(
                \sprintf('%s%s.gitignore', $fullPath, \DIRECTORY_SEPARATOR),
                \implode("\n", [
                    "# Generated by `src/Storage/LocalDriver.php`",
                    "# Do not modify.",
                    "*"
                ])
            );
        }

        $this->relPath = $relPath;
        $this->fullPath = $fullPath;
    }

    public static function getName(): string
    {
        return 'local';
    }

    public static function getConfiguration(): array
    {
        return [];
    }

    public function getAdapter(): FilesystemAdapter
    {
        return new LocalFilesystemAdapter($this->fullPath);
    }

    public function getPublicUrl(): array
    {
        return [
            \sprintf(
                "%s%s",
                $this->url,
                $this->relPath
            )
        ];
    }
}
